@startuml

title Template Controller

actor User
participant HTTP
participant TemplateController
database RDF
participant SimpleTemplate
participant Query
participant Handler
participant Parameter
participant PCRE
participant Prolog

User -> HTTP: GET /user?id=Pepe
HTTP -> TemplateController: template_controller(RequestPath, Request)
loop Path != RequestPath
    TemplateController -> RDF: rdf(Controller, 'lyncex:TemplateController')
    RDF -> TemplateController: Controller, Path, Template
end

TemplateController -> Parameter: process_parameters(Request)
Parameter -> RDF: rdf(Parameter, 'lyncex:validation')
RDF -> Parameter: ValidationRegex
alt ValidationRegex exists
    Parameter -> PCRE: re_match(ParameterValue, ValidationRegex)
end
Parameter -> RDF: rdf(Parameter, 'lyncex:code')
RDF -> Parameter: ValidationCode
alt ValidationCode exists
    Parameter -> Prolog: call(ValidationCode)
end
Parameter -> TemplateController: Parameters

TemplateController -> Query: resolve_query(Controller, Parameters)
loop forall queries
    Query -> RDF: rdf(Query, QueryTemplate)
    RDF -> Query: QueryTemplate
    alt QueryTemplate exists
        Query -> SimpleTemplate: render_template(QueryTemplate, Parameters)
        SimpleTemplate -> Query: QueryString
    else
        Query -> RDF: rdf(Query, QueryString)
        RDF -> Query: QueryString
    end
    Query -> RDF: rdf(QueryString)
    RDF -> Query: QueryData
end
Query -> TemplateController: QueryOutput

TemplateController -> Handler: resolve_handler(Controller, Parameters)
loop forall handlers
    Handler -> RDF: rdf(Handler, HandlerCode)
    RDF -> Handler: HandlerCode
    Handler -> Prolog: call(HandlerCode, Parameters)
    Prolog -> Handler: HandlerData
end
Handler -> TemplateController: HandlerOutput

TemplateController -> SimpleTemplate: render_template(Template, Parameters, HandlerOutput, QueryOutput)
SimpleTemplate -> TemplateController: HTMLOutput

TemplateController -> HTTP: Response(HTMLOutput, text/html)
HTTP -> User: HTTP response with HTML data

@enduml

